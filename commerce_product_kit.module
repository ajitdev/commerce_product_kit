<?php
/**
 * @file
 * Contains the definition of the field formatter.
 */

/**
 * Implements hook_menu().
 */
function commerce_product_kit_menu() {
  $items['admin/commerce/config/product-kit'] = array(
    'title' => 'Product Kit Settings',
    'description' => 'Settings for the product kit',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('commerce_product_kit_admin_form'),
    'access arguments' => array('administer commerce product kit'),
    'file' => 'commerce_product_kit.admin.inc',
    'parent' => 'admin/commerce/config/product-settings',
    'weight' => 10,
  );

  return $items;
}

/**
 * Implements hook_permission().
 */
function commerce_product_kit_permission() {
  return array(
    'administer commerce product kit' =>  array(
      'title' => t('Administer commerce product kit'),
      'description' => t('Perform administration task for commerce product kit module.'),
    ),
  );
}

/**
 * Implements hook_field_formatter_info().
 */
function commerce_product_kit_field_formatter_info() {
  return array(
    'commerce_product_kit' => array(
      'label' => t('Product kit'),
      'field types' => array('entityreference', 'commerce_product_reference'),
    ),
  );
}

/**
 * Implements hook_field_formatter_view().
 */
function commerce_product_kit_field_formatter_view($entity_type, $entity, $field, $instance, $langcode, $items, $display) {
  $element = array();
  if ($display['type'] == 'commerce_product_kit') {
    $product_ids = array();
    foreach ($items as $item) {
      if (isset($item['product_id'])) {
        $product_ids[] = $item['product_id'];
      }
      elseif (module_exists('entityreference') && isset($item['target_id'])) {
        $product_ids[] = $item['target_id'];
      }
    }
    $product_ids = array_count_values($product_ids);
    $commerce_product_kit_add_cart_form = drupal_get_form('commerce_product_kit_add_cart_form', $product_ids);
    return array(
      '#theme' => 'commerce_product_kit',
      '#commerce_product_kit_form' => $commerce_product_kit_add_cart_form,
    );
  }

  return $element;
}

/**
 * Form which displays the single button to add the products in the kit
 * to the cart.
 */
function commerce_product_kit_add_cart_form($form, &$form_state, $product_ids) {
  $product_kit_label = variable_get('commerce_product_kit_label', 'product kit');
  $form = array();
  $form['product_ids'] = array(
    '#type' => 'value',
    '#value' => $product_ids,
  );
  $form['add_kit_to_cart'] = array(
    '#type' => 'submit',
    '#value' => t("Add {$product_kit_label} to cart"),
  );
  return $form;
}

/**
 * Submit function to add products to the cart.
 */
function commerce_product_kit_add_cart_form_submit($form, &$form_state) {
  global $user;
  $product_kit_label = variable_get('commerce_product_kit_label', 'product kit');
  $product_ids = $form_state['values']['product_ids'];
  if (!empty($product_ids)) {
    // Load each product and add to cart.
    foreach ($product_ids as $product_id => $quantity) {
      $product = commerce_product_load($product_id);
      $line_item = commerce_product_line_item_new($product, $quantity);
      // For calculation of selling price. This helps in invoking the
      // pricing or shipping rules.
      drupal_alter('commerce_product_calculate_sell_price_line_item', $line_item);
      rules_invoke_event('commerce_product_calculate_sell_price', $line_item);
      $line_item = commerce_cart_product_add($user->uid, $line_item);
    }
    drupal_set_message(t("All products from the {$product_kit_label} have been added to the cart."), 'status', FALSE);
  }
}

/**
 * Implements hook_theme().
 */
function commerce_product_kit_theme($existing, $type, $theme, $path) {
  return array(
    'commerce_product_kit' => array(
      'template' => 'templates/commerce-product-kit',
      'variables' => array(
        'commerce_product_kit_form' => array(),
      ),
    ),
  );
}
